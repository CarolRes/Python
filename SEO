#coding: utf-8
from selenium import webdriver
import pandas as pd
from selenium.common.exceptions import NoSuchElementException

## Checar se existe a tag buscada

def check_exists_by_xpath(xpath):
    try:
        driver.find_element_by_xpath(xpath)
    except NoSuchElementException:
        return False
    return True

## Se existir a tag, verificar se ela é vazia

def tagNone(VarTag,ListaTag):
    if VarTag != None:
        ListaTag.append(VarTag)
    else:
        ListaTag.append('Não tem texto na tag')

## Acessando o Chrome

driver = webdriver.Chrome()

## Lista de URLs que serão verificadas

df = pd.read_csv('url_.csv', encoding='utf-8')

## Conteúdo das colunas [Listas]

titulos = []
dominios = []
h1s = []

##Acesse cada url em df

for row in df["URLS"]:
    print(row)
    driver.get(row)
    
##Para cada URLs verifique H1, title e domínio

    title = driver.find_element_by_xpath('//title').get_attribute('textContent')
    tagNone(title, titulos)
    dominio = driver.find_element_by_xpath("//meta[@property='og:url']").get_attribute('content')
    tagNone(dominio, dominios)
    if check_exists_by_xpath("//h1") == True:
        h1 = driver.find_element_by_xpath("//div/h1").text
        tagNone(h1, h1s)
    else:
        h1s.append('nao tem tag')

## Preenchendo as colunas

df["TITLES"] = titulos
df["DOMINIO"] = dominios
df['H1'] = h1s


print(df.head(3))

## Salvando em CSV

df.to_csv('final.csv', index=True, header=True, sep=',', encoding='utf-8')







